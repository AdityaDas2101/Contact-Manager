{"ast":null,"code":"var _jsxFileName = \"G:\\\\reacttut\\\\ContactApp\\\\contact-app\\\\src\\\\components\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport api from '../api/contacts';\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\nimport ContactDetail from \"./ContactDetail\";\nimport EditContact from \"./EditContact\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  var _JSON$parse;\n  const LOCAL_STORAGE_KEY = \"contacts\";\n  const [contacts, setContacts] = useState((_JSON$parse = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY))) !== null && _JSON$parse !== void 0 ? _JSON$parse : []);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n  // Retrieve Contacts\n  const retriveContacts = async () => {\n    const response = await api.get(\"/contacts\");\n    return response.data;\n  };\n  const addContactHandler = async contact => {\n    console.log(contact);\n    const request = {\n      id: uuid(),\n      ...contact\n    };\n    const response = await api.post(\"/contacts\", request);\n    setContacts([...contacts, response.data]);\n  };\n  const updateContactHandler = async contact => {\n    const response = await api.put(`/contacts/${contact.id}`, contact);\n    const {\n      id,\n      name,\n      email,\n      number\n    } = response.data;\n    setContacts(contacts.map(contact => {\n      return contact.id === id ? {\n        ...response.data\n      } : contact;\n    }));\n  };\n  const removeContactHandler = async id => {\n    await api.delete(`/contacts/${id}`);\n    const newContactList = contacts.filter(contact => {\n      return contact.id !== id;\n    });\n    setContacts(newContactList);\n  };\n  const searchHandler = searchTerm => {\n    setSearchTerm(searchTerm);\n    if (searchTerm !== \"\") {\n      const newContactList = contacts.filter(contact => {\n        return Object.values(contact).join(\" \").toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setSearchResults(newContactList);\n    } else {\n      searchResults(contacts);\n    }\n  };\n  useEffect(() => {\n    //   const retriveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    //   if (retriveContacts) setContacts(retriveContacts);\n    const getAllContacts = async () => {\n      const allContacts = await retriveContacts();\n      if (allContacts) setContacts(allContacts);\n    };\n    getAllContacts();\n  }, []);\n  useEffect(() => {\n    // localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui container\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          render: props => /*#__PURE__*/_jsxDEV(ContactList, {\n            ...props,\n            contacts: searchTerm.length < 1 ? contacts : searchResults,\n            getContactId: removeContactHandler,\n            term: searchTerm,\n            searchKeyword: searchHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/add\",\n          render: props => /*#__PURE__*/_jsxDEV(AddContact, {\n            ...props,\n            addContactHandler: addContactHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/edit\",\n          render: props => /*#__PURE__*/_jsxDEV(EditContact, {\n            ...props,\n            updateContactHandler: updateContactHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/contact/:id\",\n          component: ContactDetail\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uW2uU3reuR4EQ81V+3uVulG3URA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Switch","Route","v4","uuid","api","Header","AddContact","ContactList","ContactDetail","EditContact","jsxDEV","_jsxDEV","App","_s","_JSON$parse","LOCAL_STORAGE_KEY","contacts","setContacts","JSON","parse","localStorage","getItem","searchTerm","setSearchTerm","searchResults","setSearchResults","retriveContacts","response","get","data","addContactHandler","contact","console","log","request","id","post","updateContactHandler","put","name","email","number","map","removeContactHandler","delete","newContactList","filter","searchHandler","Object","values","join","toLowerCase","includes","getAllContacts","allContacts","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","exact","render","props","length","getContactId","term","searchKeyword","component","_c","$RefreshReg$"],"sources":["G:/reacttut/ContactApp/contact-app/src/components/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport api from '../api/contacts';\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport AddContact from \"./AddContact\";\nimport ContactList from \"./ContactList\";\nimport ContactDetail from \"./ContactDetail\";\nimport EditContact from \"./EditContact\";\n\nfunction App() {\n  const LOCAL_STORAGE_KEY = \"contacts\";\n  const [contacts, setContacts] = useState(\n    JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) ?? []\n  );\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n\n// Retrieve Contacts\nconst retriveContacts = async () =>{\n  const response = await api.get(\"/contacts\");\n  return response.data;\n};\n\n  const addContactHandler = async (contact) => {\n    console.log(contact);\n    const request = {\n      id: uuid(),\n      ...contact\n    }\n\n    const response = await api.post(\"/contacts\",request)\n    setContacts([...contacts, response.data]);\n  };\n\n  const updateContactHandler = async (contact) => {\n    const response = await api.put(`/contacts/${contact.id}`, contact);\n    const {id, name, email, number} = response.data;\n    setContacts(contacts.map(contact =>{\n      return contact.id === id ? {...response.data} : contact;\n    }));\n  };\n\n  const removeContactHandler = async (id) => {\n    await api.delete(`/contacts/${id}`);\n    const newContactList = contacts.filter((contact) => {\n      return contact.id !== id;\n    });\n\n    setContacts(newContactList);\n  };\n\n  const searchHandler = (searchTerm) => {\n    setSearchTerm(searchTerm);\n    if (searchTerm !== \"\") {\n      const newContactList = contacts.filter((contact) => {\n        return Object.values(contact).join(\" \").toLowerCase().includes(searchTerm.toLowerCase());\n      });\n      setSearchResults(newContactList);\n    } else {\n      searchResults(contacts);\n    }\n  };\n\n  useEffect(() => {\n  //   const retriveContacts = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n  //   if (retriveContacts) setContacts(retriveContacts);\n    const getAllContacts = async () => {\n      const allContacts = await retriveContacts();\n      if(allContacts) setContacts(allContacts);\n    };\n\n    getAllContacts();\n  }, []);\n\n  useEffect(() => {\n    // localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(contacts));\n  }, [contacts]);\n\n  return (\n    <div className=\"ui container\">\n      <Router>\n      <Header />\n        <Switch>\n          <Route path=\"/\" exact \n            render={(props) => (\n            <ContactList \n              {...props} \n              contacts={searchTerm.length < 1 ? contacts : searchResults}\n              getContactId={removeContactHandler}\n              term={searchTerm} \n              searchKeyword={searchHandler}\n              />\n          )}\n          />\n          <Route path=\"/add\" \n          render={(props) => (\n            <AddContact \n              {...props} \n              addContactHandler={addContactHandler} />\n          )}\n          />\n\n            \n          <Route path=\"/edit\" \n          render={(props) => (\n            <EditContact \n              {...props} \n              updateContactHandler={updateContactHandler} />\n          )}\n          />\n\n          <Route path=\"/contact/:id\" component={ContactDetail}/>\n        </Switch>\n      </Router>\n\n\n      {/* <AddContact addContactHandler={addContactHandler} />\n      <ContactList contacts={contacts} getContactId={removeContactHandler} /> */}\n      \n\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}